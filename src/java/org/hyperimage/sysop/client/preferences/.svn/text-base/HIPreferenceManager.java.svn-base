/* $Id$ */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at license/HYPERIMAGE.LICENSE
 * or http://www.sun.com/cddl/cddl.html.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at license/HYPERIMAGE.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2006-2009 Humboldt-Universitaet zu Berlin
 * All rights reserved.  Use is subject to license terms.
 */

package org.hyperimage.sysop.client.preferences;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayDeque;
import java.util.prefs.BackingStoreException;
import java.util.prefs.InvalidPreferencesFormatException;
import java.util.prefs.Preferences;

/**
 * @author Heinz-Guenter Kuper
 */
public class HIPreferenceManager {
	private static Preferences m_prefs = null;
	
	// Constants
	private static final String NODENAME = "/org/hyperimage/hieditor";
	private static final String PREF_FILENAME = "HyperPreferences.xml";
	private static final String DELIM = ","; // Delimiter
	private static final Integer DEF_SVR_HISTORY_SIZE = 4;
	
	// Preference keys
	private static final String SVR_PREF = "serverlist";
	
	// Default preference values
	private static final String DEF_SVR = "localhost";

	public HIPreferenceManager() {
		m_prefs = Preferences.userRoot().node(NODENAME);
		File prefFile = new File(PREF_FILENAME);
		if( !prefFile.exists() && backingStoreAvailable() )
			initPrefs();
	}
	
	public void initPrefs() {
		m_prefs.put(SVR_PREF, DEF_SVR);
		syncPrefs();
		exportPrefs();
	}
	
	//################################################################
	// TEST CASES:
	// 1. no values imported, default values, add same value as default ("localhost")
	// 2. Try to add server including "|" symbol in server string
	// 3. list longer than desired history, should truncate keeping most recent.
	// 4. list shorter than desired history, should grow.
	// 5. test shuffle by changing order of adding things, e.g. add svr1, then add svr2, then add svr1 again. svr1 should be top, list should still be length 2
	//################################################################
	
	public void putServerPref(String strNewSvr, Integer nServerHistory) {
		String strUpdatedServers = "";
		loadPrefs();
		
		ArrayDeque<String> serverLIFO = getServerPref();
		if( serverLIFO.contains(strNewSvr) ) {
			// Maybe user wants to reshuffle the order, because this server is more popular?
			if( strNewSvr.compareTo(serverLIFO.peekFirst()) == 0 )
				return;
			else {
				serverLIFO.remove(strNewSvr);
			}
		}
		
		// Add the new server, either because it is not already in list, or because it is being reshuffled.
		serverLIFO.addFirst(strNewSvr);
		
		if( serverLIFO.size() < nServerHistory )
			nServerHistory = serverLIFO.size();
		
		// Prep for prefs. The listed servers in excess of the history length are discarded.
		for(int i = 0; i < nServerHistory; i++ ) {
			String server = serverLIFO.removeFirst();
			if( serverLIFO.size() == 0 )
				strUpdatedServers += server;	// last or only server
			else
				strUpdatedServers += server + DELIM;
		}
		
		m_prefs.put(SVR_PREF, strUpdatedServers);
		syncPrefs();
		exportPrefs();
	}
	
	public void putServerPref(String strNewSvr) {
		putServerPref(strNewSvr, DEF_SVR_HISTORY_SIZE);
	}
	
	/**
	 * 
	 * @return
	 */
	public ArrayDeque<String> getServerPref() {
		// ArrayDeque is not thread-safe, but that shouldn't be a problem.
		ArrayDeque<String> serverLIFO = new ArrayDeque<String>(DEF_SVR_HISTORY_SIZE+1);
		loadPrefs();
		String strSvrs = m_prefs.get(SVR_PREF, DEF_SVR);
		String[] strarrSvrs = strSvrs.split(DELIM);
		for( String server : strarrSvrs ) {
			serverLIFO.add(server);
		}
		
		return serverLIFO;
	}

	public void loadPrefs() {
		InputStream is = null;
		try {
			is = new BufferedInputStream(new FileInputStream(PREF_FILENAME));
		} catch (FileNotFoundException fnfe) {
			fnfe.printStackTrace();
		}

		// Import preference data
		try {
			Preferences.importPreferences(is);
		} catch (InvalidPreferencesFormatException ipfe) {
			ipfe.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}
	
	public void exportPrefs() {
		try {
			// Export the node to a file
			m_prefs.exportNode(new FileOutputStream(PREF_FILENAME));
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} catch (BackingStoreException bse) {
			bse.printStackTrace();
		}
	}
	
	public void resetPrefs() {
		try {
			m_prefs.clear();
		} catch (BackingStoreException bse) {
			bse.printStackTrace();
		}
	}
	
	private void syncPrefs() {
		try {
			m_prefs.sync();
		} catch (BackingStoreException bse) {
			bse.printStackTrace();
		}
	}
	
	/////////////////////
	// UTILITY METHODS //
	/////////////////////
	
	// From http://java.sun.com/javase/6/docs/technotes/guides/preferences/overview.html
	// Section: "Determining Backing Store Status"
	private static final String BACKING_STORE_AVAIL = "BackingStoreAvail";

    private static boolean backingStoreAvailable() {
        Preferences prefs = Preferences.userRoot().node("<temporary>");
        try {
            boolean oldValue = prefs.getBoolean(BACKING_STORE_AVAIL, false);
            prefs.putBoolean(BACKING_STORE_AVAIL, !oldValue);
            prefs.flush();
        } catch(BackingStoreException e) {
            return false;
        }
        return true;
    }

	
	/////////////////
	// FOR TESTING //
	/////////////////
	public void putPrefTest() {
		m_prefs.put("myString", "a string");
		m_prefs.putBoolean("myBoolean", true);
		m_prefs.putInt("myInt", 123);
		m_prefs.putLong("myLong", 123L);
		m_prefs.putFloat("myFloat", 12.3F);
		m_prefs.putDouble("myDouble", 12.3);
		byte[] bytes = new byte[10];
		m_prefs.putByteArray("myByteArray", bytes); // byte[]
	}
	
	public String getPrefTest() {
		String prefValue = "SERVER: " + m_prefs.get(SVR_PREF, "could not retrieve the server");
		prefValue += "BOOLEAN: " + m_prefs.getBoolean("myBoolean", false);
		return prefValue;
	}
}
