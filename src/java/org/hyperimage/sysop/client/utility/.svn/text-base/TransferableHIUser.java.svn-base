/* $Id$ */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at license/HYPERIMAGE.LICENSE
 * or http://www.sun.com/cddl/cddl.html.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at license/HYPERIMAGE.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2006-2009 Humboldt-Universitaet zu Berlin
 * All rights reserved.  Use is subject to license terms.
 */

package org.hyperimage.sysop.client.utility;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

/**
 * @author Heinz-Guenter Kuper
 */
public class TransferableHIUser implements Transferable {
	private static final String userType = DataFlavor.javaJVMLocalObjectMimeType + ";class=org.hyperimage.sysop.client.utility.DecoratedHIUser";
	public static final DataFlavor userFlavour = setDataFlavour();
	private DecoratedHIUser m_user = null;

	public TransferableHIUser(DecoratedHIUser user) {
		m_user = user;
	}
	
	private static DataFlavor setDataFlavour() {
		DataFlavor flavor = null;
		try {
			flavor = new DataFlavor(userType);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return flavor;
	}
	
	@Override
	public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
		if( flavor == userFlavour )
			return m_user;
		else
			return null;
	}

	@Override
	public DataFlavor[] getTransferDataFlavors() {
		DataFlavor[] flavours = {userFlavour};
		return flavours;
	}

	@Override
	public boolean isDataFlavorSupported(DataFlavor flavor) {
		return flavor.equals(userFlavour);
	}

}
